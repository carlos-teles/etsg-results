import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.dates as mdates
import sys
import os, fnmatch, re

def hasNumbers(inputString):
	return bool(re.search(r'\d', inputString))

plt.style.use("ggplot")

ax = plt.gca()

list_mask_days = [['2018-09-01',0,0,0,0,0,0,0,0,0,0,0],['2018-09-02',0,0,0,0,0,0,0,0,0,0,0],['2018-09-03',0,0,0,0,0,0,0,0,0,0,0],['2018-09-04',0,0,0,0,0,0,0,0,0,0,0],['2018-09-05',0,0,0,0,0,0,0,0,0,0,0],['2018-09-06',0,0,0,0,0,0,0,0,0,0,0],['2018-09-07',0,0,0,0,0,0,0,0,0,0,0],['2018-09-08',0,0,0,0,0,0,0,0,0,0,0],['2018-09-09',0,0,0,0,0,0,0,0,0,0,0],['2018-09-10',0,0,0,0,0,0,0,0,0,0,0],['2018-09-11',0,0,0,0,0,0,0,0,0,0,0],['2018-09-12',0,0,0,0,0,0,0,0,0,0,0],['2018-09-13',0,0,0,0,0,0,0,0,0,0,0],['2018-09-14',0,0,0,0,0,0,0,0,0,0,0],['2018-09-15',0,0,0,0,0,0,0,0,0,0,0],['2018-09-16',0,0,0,0,0,0,0,0,0,0,0],['2018-09-17',0,0,0,0,0,0,0,0,0,0,0],['2018-09-18',0,0,0,0,0,0,0,0,0,0,0],['2018-09-19',0,0,0,0,0,0,0,0,0,0,0],['2018-09-20',0,0,0,0,0,0,0,0,0,0,0],['2018-09-21',0,0,0,0,0,0,0,0,0,0,0],['2018-09-22',0,0,0,0,0,0,0,0,0,0,0],['2018-09-23',0,0,0,0,0,0,0,0,0,0,0],['2018-09-24',0,0,0,0,0,0,0,0,0,0,0],['2018-09-25',0,0,0,0,0,0,0,0,0,0,0],['2018-09-26',0,0,0,0,0,0,0,0,0,0,0],['2018-09-27',0,0,0,0,0,0,0,0,0,0,0],['2018-09-28',0,0,0,0,0,0,0,0,0,0,0],['2018-09-29',0,0,0,0,0,0,0,0,0,0,0],['2018-09-30',0,0,0,0,0,0,0,0,0,0,0],['2018-10-01',0,0,0,0,0,0,0,0,0,0,0],['2018-10-02',0,0,0,0,0,0,0,0,0,0,0],['2018-10-03',0,0,0,0,0,0,0,0,0,0,0],['2018-10-04',0,0,0,0,0,0,0,0,0,0,0],['2018-10-05',0,0,0,0,0,0,0,0,0,0,0],['2018-10-06',0,0,0,0,0,0,0,0,0,0,0],['2018-10-07',0,0,0,0,0,0,0,0,0,0,0],['2018-10-08',0,0,0,0,0,0,0,0,0,0,0],['2018-10-09',0,0,0,0,0,0,0,0,0,0,0],['2018-10-10',0,0,0,0,0,0,0,0,0,0,0],['2018-10-11',0,0,0,0,0,0,0,0,0,0,0],['2018-10-12',0,0,0,0,0,0,0,0,0,0,0],['2018-10-13',0,0,0,0,0,0,0,0,0,0,0],['2018-10-14',0,0,0,0,0,0,0,0,0,0,0],['2018-10-15',0,0,0,0,0,0,0,0,0,0,0],['2018-10-16',0,0,0,0,0,0,0,0,0,0,0],['2018-10-17',0,0,0,0,0,0,0,0,0,0,0],['2018-10-18',0,0,0,0,0,0,0,0,0,0,0],['2018-10-19',0,0,0,0,0,0,0,0,0,0,0],['2018-10-20',0,0,0,0,0,0,0,0,0,0,0],['2018-10-21',0,0,0,0,0,0,0,0,0,0,0],['2018-10-22',0,0,0,0,0,0,0,0,0,0,0],['2018-10-23',0,0,0,0,0,0,0,0,0,0,0],['2018-10-24',0,0,0,0,0,0,0,0,0,0,0],['2018-10-25',0,0,0,0,0,0,0,0,0,0,0],['2018-10-26',0,0,0,0,0,0,0,0,0,0,0],['2018-10-27',0,0,0,0,0,0,0,0,0,0,0],['2018-10-28',0,0,0,0,0,0,0,0,0,0,0],['2018-10-29',0,0,0,0,0,0,0,0,0,0,0],['2018-10-30',0,0,0,0,0,0,0,0,0,0,0],['2018-10-31',0,0,0,0,0,0,0,0,0,0,0],['2018-11-01',0,0,0,0,0,0,0,0,0,0,0],['2018-11-02',0,0,0,0,0,0,0,0,0,0,0],['2018-11-03',0,0,0,0,0,0,0,0,0,0,0],['2018-11-04',0,0,0,0,0,0,0,0,0,0,0],['2018-11-05',0,0,0,0,0,0,0,0,0,0,0],['2018-11-06',0,0,0,0,0,0,0,0,0,0,0],['2018-11-07',0,0,0,0,0,0,0,0,0,0,0],['2018-11-08',0,0,0,0,0,0,0,0,0,0,0],['2018-11-09',0,0,0,0,0,0,0,0,0,0,0],['2018-11-10',0,0,0,0,0,0,0,0,0,0,0],['2018-11-11',0,0,0,0,0,0,0,0,0,0,0],['2018-11-12',0,0,0,0,0,0,0,0,0,0,0],['2018-11-13',0,0,0,0,0,0,0,0,0,0,0],['2018-11-14',0,0,0,0,0,0,0,0,0,0,0],['2018-11-15',0,0,0,0,0,0,0,0,0,0,0],['2018-11-16',0,0,0,0,0,0,0,0,0,0,0],['2018-11-17',0,0,0,0,0,0,0,0,0,0,0],['2018-11-18',0,0,0,0,0,0,0,0,0,0,0],['2018-11-19',0,0,0,0,0,0,0,0,0,0,0],['2018-11-20',0,0,0,0,0,0,0,0,0,0,0],['2018-11-21',0,0,0,0,0,0,0,0,0,0,0],['2018-11-22',0,0,0,0,0,0,0,0,0,0,0],['2018-11-23',0,0,0,0,0,0,0,0,0,0,0],['2018-11-24',0,0,0,0,0,0,0,0,0,0,0],['2018-11-25',0,0,0,0,0,0,0,0,0,0,0],['2018-11-26',0,0,0,0,0,0,0,0,0,0,0],['2018-11-27',0,0,0,0,0,0,0,0,0,0,0],['2018-11-28',0,0,0,0,0,0,0,0,0,0,0],['2018-11-29',0,0,0,0,0,0,0,0,0,0,0],['2018-11-30',0,0,0,0,0,0,0,0,0,0,0],['2018-12-01',0,0,0,0,0,0,0,0,0,0,0],['2018-12-02',0,0,0,0,0,0,0,0,0,0,0],['2018-12-03',0,0,0,0,0,0,0,0,0,0,0],['2018-12-04',0,0,0,0,0,0,0,0,0,0,0],['2018-12-05',0,0,0,0,0,0,0,0,0,0,0],['2018-12-06',0,0,0,0,0,0,0,0,0,0,0],['2018-12-07',0,0,0,0,0,0,0,0,0,0,0],['2018-12-08',0,0,0,0,0,0,0,0,0,0,0],['2018-12-09',0,0,0,0,0,0,0,0,0,0,0],['2018-12-10',0,0,0,0,0,0,0,0,0,0,0],['2018-12-11',0,0,0,0,0,0,0,0,0,0,0],['2018-12-12',0,0,0,0,0,0,0,0,0,0,0],['2018-12-13',0,0,0,0,0,0,0,0,0,0,0],['2018-12-14',0,0,0,0,0,0,0,0,0,0,0],['2018-12-15',0,0,0,0,0,0,0,0,0,0,0],['2018-12-16',0,0,0,0,0,0,0,0,0,0,0],['2018-12-17',0,0,0,0,0,0,0,0,0,0,0],['2018-12-18',0,0,0,0,0,0,0,0,0,0,0],['2018-12-19',0,0,0,0,0,0,0,0,0,0,0],['2018-12-20',0,0,0,0,0,0,0,0,0,0,0],['2018-12-21',0,0,0,0,0,0,0,0,0,0,0],['2018-12-22',0,0,0,0,0,0,0,0,0,0,0],['2018-12-23',0,0,0,0,0,0,0,0,0,0,0],['2018-12-24',0,0,0,0,0,0,0,0,0,0,0],['2018-12-25',0,0,0,0,0,0,0,0,0,0,0],['2018-12-26',0,0,0,0,0,0,0,0,0,0,0],['2018-12-27',0,0,0,0,0,0,0,0,0,0,0],['2018-12-28',0,0,0,0,0,0,0,0,0,0,0],['2018-12-29',0,0,0,0,0,0,0,0,0,0,0],['2018-12-30',0,0,0,0,0,0,0,0,0,0,0],['2018-12-31',0,0,0,0,0,0,0,0,0,0,0],['2019-01-01',0,0,0,0,0,0,0,0,0,0,0],['2019-01-02',0,0,0,0,0,0,0,0,0,0,0],['2019-01-03',0,0,0,0,0,0,0,0,0,0,0],['2019-01-04',0,0,0,0,0,0,0,0,0,0,0],['2019-01-05',0,0,0,0,0,0,0,0,0,0,0],['2019-01-06',0,0,0,0,0,0,0,0,0,0,0],['2019-01-07',0,0,0,0,0,0,0,0,0,0,0],['2019-01-08',0,0,0,0,0,0,0,0,0,0,0],['2019-01-09',0,0,0,0,0,0,0,0,0,0,0],['2019-01-10',0,0,0,0,0,0,0,0,0,0,0],['2019-01-11',0,0,0,0,0,0,0,0,0,0,0],['2019-01-12',0,0,0,0,0,0,0,0,0,0,0],['2019-01-13',0,0,0,0,0,0,0,0,0,0,0],['2019-01-14',0,0,0,0,0,0,0,0,0,0,0],['2019-01-15',0,0,0,0,0,0,0,0,0,0,0],['2019-01-16',0,0,0,0,0,0,0,0,0,0,0],['2019-01-17',0,0,0,0,0,0,0,0,0,0,0],['2019-01-18',0,0,0,0,0,0,0,0,0,0,0],['2019-01-19',0,0,0,0,0,0,0,0,0,0,0],['2019-01-20',0,0,0,0,0,0,0,0,0,0,0],['2019-01-21',0,0,0,0,0,0,0,0,0,0,0],['2019-01-22',0,0,0,0,0,0,0,0,0,0,0],['2019-01-23',0,0,0,0,0,0,0,0,0,0,0],['2019-01-24',0,0,0,0,0,0,0,0,0,0,0],['2019-01-25',0,0,0,0,0,0,0,0,0,0,0],['2019-01-26',0,0,0,0,0,0,0,0,0,0,0],['2019-01-27',0,0,0,0,0,0,0,0,0,0,0],['2019-01-28',0,0,0,0,0,0,0,0,0,0,0],['2019-01-29',0,0,0,0,0,0,0,0,0,0,0],['2019-01-30',0,0,0,0,0,0,0,0,0,0,0],['2019-01-31',0,0,0,0,0,0,0,0,0,0,0],['2019-02-01',0,0,0,0,0,0,0,0,0,0,0],['2019-02-02',0,0,0,0,0,0,0,0,0,0,0],['2019-02-03',0,0,0,0,0,0,0,0,0,0,0],['2019-02-04',0,0,0,0,0,0,0,0,0,0,0],['2019-02-05',0,0,0,0,0,0,0,0,0,0,0],['2019-02-06',0,0,0,0,0,0,0,0,0,0,0],['2019-02-07',0,0,0,0,0,0,0,0,0,0,0],['2019-02-08',0,0,0,0,0,0,0,0,0,0,0],['2019-02-09',0,0,0,0,0,0,0,0,0,0,0],['2019-02-10',0,0,0,0,0,0,0,0,0,0,0],['2019-02-11',0,0,0,0,0,0,0,0,0,0,0],['2019-02-12',0,0,0,0,0,0,0,0,0,0,0],['2019-02-13',0,0,0,0,0,0,0,0,0,0,0],['2019-02-14',0,0,0,0,0,0,0,0,0,0,0],['2019-02-15',0,0,0,0,0,0,0,0,0,0,0],['2019-02-16',0,0,0,0,0,0,0,0,0,0,0],['2019-02-17',0,0,0,0,0,0,0,0,0,0,0],['2019-02-18',0,0,0,0,0,0,0,0,0,0,0],['2019-02-19',0,0,0,0,0,0,0,0,0,0,0],['2019-02-20',0,0,0,0,0,0,0,0,0,0,0],['2019-02-21',0,0,0,0,0,0,0,0,0,0,0],['2019-02-22',0,0,0,0,0,0,0,0,0,0,0],['2019-02-23',0,0,0,0,0,0,0,0,0,0,0],['2019-02-24',0,0,0,0,0,0,0,0,0,0,0],['2019-02-25',0,0,0,0,0,0,0,0,0,0,0],['2019-02-26',0,0,0,0,0,0,0,0,0,0,0],['2019-02-27',0,0,0,0,0,0,0,0,0,0,0],['2019-02-28',0,0,0,0,0,0,0,0,0,0,0]]

range_month_year = [[2018, 9, '09'], [2018, 10,'10'], [2018, 11,'11'], [2018,12,'12'], [2019,1,'01'], [2019,2,'02'] ]

clabel = ['day', 'dhcp', 'http', 'dns', 'fileinfo', 'stats', 'tls', 'alert', 'ssh', 'flow', 'netflow', 'xxxx']
only_fig = ['dhcp', 'http', 'dns', 'fileinfo', 'stats', 'tls', 'alert', 'ssh', 'flow']

colNames = clabel
dict_all = {}

listOfFiles = os.listdir('.')
pattern = "*.csv"
for entry in listOfFiles:
	if fnmatch.fnmatch(entry, pattern):
		print (entry)
		if hasNumbers( entry ) and ('Packets' in entry or 'Usage' in entry ) :
			print("XXXXXXXXXXXXXXXXXXXXXXXXXX")
			statinfo = os.stat(entry)
			#print( statinfo )
			if statinfo.st_size > 0:
				df = pd.read_csv(entry) 
				print( df.empty )
				print("XXXXXXXXXXXXXXXXXXXXXXXXXX")
				#print(df.head())
				df['year'] = pd.DatetimeIndex(df['time']).year
				df['year'] = pd.DatetimeIndex(df['time']).year
				df['month'] = pd.DatetimeIndex(df['time']).month
				df['month_year'] = pd.to_datetime(df['time']).dt.to_period('M')
				df['day'] = pd.DatetimeIndex(df['time']).day
				#print(df.head())
				var_env = df.iloc[0]['tags']
				#sys.exit(0)



				#print(df)
				#sys.exit(0)

				for wdata in range_month_year:
					# use a more precise date string for the x axis locations in the toolbar

					#print( wdata, x_data )
					#print( df.loc[ (df['year'] == wdata[0]) & (df['month'] == wdata[1])] )
					df_copy = df.loc[ (df['year'] == wdata[0]) & (df['month'] == wdata[1])] 
					print(df_copy)
					#for x_data in only_fig:

					fig, ax = plt.subplots( figsize=(12,8) )
					fig.autofmt_xdate()
					#df.loc[ (df['year'] == wdata[0]) & (df['month'] == wdata[1])].plot(kind='line',x='day',y='out', color='blue', ax=ax)
					#df_copy.plot(kind='line',x='day',y='out', color='blue', ax=ax)


					if 'out' in entry:
						df_copy.plot(kind='line',x='day',y='out', color='blue', ax=ax)
					elif 'in' in entry:
						df_copy.plot(kind='line',x='day',y='in', color='blue', ax=ax)


					#df.query("year == "+wdata[0]+" and month == "+wdata[1] )
					#sys.exit(0)
					#df.query("year == "+wdata[0]+" and month == "+wdata[1]).plot(kind='line',x='day',y=x_data, color='blue', ax=ax)

					#ax.xaxis.set_major_formatter( mdates.DateFormatter("%Y-%m-%d"))
					ax.xaxis.set_major_formatter( mdates.DateFormatter("%d"))
					ax.xaxis.set_major_locator( mdates.DayLocator())
					#ax.fmt_xdata = mdates.DateFormatter('%Y-%m-%d')

					if 'Packets' in entry :
						ax.set_title( var_env + ' Packets - '  + str(wdata[0])+'/'+str(wdata[1]) )
					elif  'Usage' in entry :
						ax.set_title( var_env + ' Usage - '  + str(wdata[0])+'/'+str(wdata[1]) )
					plt.xticks(rotation=45)
					plt.savefig(str(wdata[0])+'_'+str(wdata[2])+'_'+entry+'lines_'+'_v2.png')
					plt.cla()
					plt.clf()
					#sys.exit(0)


sys.exit(0)

